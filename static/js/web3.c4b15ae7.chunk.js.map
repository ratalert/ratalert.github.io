{"version":3,"sources":["App.jsx"],"names":["targetNetwork","networkName","ethers","require","chainId","lastBlockTime","NETWORKS","matic","dayTime","appMode","process","DEBUG","hour","Date","getHours","console","log","localProviderUrl","scaffoldEthProvider","navigator","onLine","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","INFURA_ID","rpcUrl","localProviderUrlFromEnv","REACT_APP_PROVIDER","blockExplorer","localProvider","Math","round","getTime","App","props","_jsx2","mainnetProvider","_isProvider","_network","_useState","useState","_useState2","_slicedToArray","injectedProvider","setInjectedProvider","_useState3","_useState4","address","setAddress","gasPrice","useGasPrice","userSigner","useUserProviderAndSigner","signer","localBalance","useBalance","utils","formatEther","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","getAddress","_getAddress","wrap","_context2","prev","next","_callee","newAddress","_context","sent","stop","apply","arguments","getBlock","_lastBlockNumber","timestamp","localChainId","selectedChainId","provider","tx","Transactor","contractConfig","useContractConfig","readContracts","useContractLoader","writeContracts","networkDisplay","networkSelected","NETWORK","networkLocal","_jsx","style","zIndex","position","right","top","padding","children","Alert","message","description","_jsxs","type","closable","name","Button","onClick","_callee3","ethereum","data","_context3","window","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","t0","t1","_useState5","_useState6","setRoute","location","pathname","connection","indexOf","_useState7","_useState8","dayTimeSwitch","dayTimeEvent","CustomEvent","bubbles","detail","dispatchEvent","className","BrowserRouter","Switch","Route","exact","path","RatMenu","active","debug","content","Landing","_defineProperty","Main","Leaderboard","Claims","Whitepaper","Gameplay","Roadmap","Faq","Tos","Dao","Giveaway","Liquidity","Infographics","Contracts","AdminDashboard"],"mappings":"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D,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAAC8D,IAAU,CAClBzE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,YAAW7C,SACrBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAAC+D,IAAQ,CAChB1E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,WAAU7C,SACpBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACgE,IAAO,CACf3E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,OAAM7C,SAChBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACiE,IAAG,CACX5E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,OAAM7C,SAChBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACkE,IAAG,CACX7E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,OAAM7C,SAChBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACmE,IAAG,CACX9E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,YAAW7C,SACrBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACoE,IAAQ,CAChB/E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,cAAa7C,SACvBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACoE,IAAQ,CAChB/E,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,aAAY7C,SACtBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACqE,IAAS,CACjBhF,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,gBAAe7C,SACzBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACsE,IAAY,CACpBjF,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,eAAc7C,SACxBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACsE,IAAY,CACpBjF,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,aAAY7C,SACtBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACT8H,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACuE,IAAS,CACjBlF,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTC,QAASA,EACToC,oBAAqBA,EACrB5C,YAAaA,QAInB6F,cAACkD,IAAK,CAACE,KAAK,SAAQ7C,SAClBP,cAACqD,IAAO,CACNhE,GAAIA,EACJI,cAAeA,EACfE,eAAgBA,EAChBzC,QAASA,EACTvC,QAASA,EACTyE,SAAUpD,EACVsH,OAAQ,EACRxG,iBAAkBA,EAClBC,oBAAqBA,EACrBrC,QAASA,EACTJ,QAASA,EACTmI,cAAeA,GACftI,YAAaA,EACbqJ,QAASxD,cAACwE,IAAc,CACtBnF,GAAIA,EACJ/E,QAASA,EACTmF,cAAeA,EACfE,eAAgBA,EAChBhF,QAASA,EACTuC,QAASA,EACTkC,SAAUpD,EACVtB,QAASA,EACTqC,oBAAqBA,EACrB5C,YAAaA","file":"static/js/web3.c4b15ae7.chunk.js","sourcesContent":["import { Alert, Button, Col, Menu, Row, List } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState, Suspense } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Dao, Contracts, Tos, Infographics, Liquidity, Giveaway, Roadmap, Faq, Landing, Address, Balance, Contract, GasGauge, Header, Ramp, Main, Leaderboard, RatMenu, Whitepaper, Gameplay, AdminDashboard, Claims} from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor, renderNotification } from \"./helpers\";\nimport {\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useBalance,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\n\nimport { useContractConfig } from \"./hooks\";\n\n// import Portis from \"@portis/web3\";\n// import Fortmatic from \"fortmatic\";\n// import Authereum from \"authereum\";\n\nconst { ethers } = require(\"ethers\");\n\nlet targetNetwork;\nlet chainId = 0;\nlet lastBlockTime = 0;\nlet networkName;\nif (process.env.REACT_APP_ETH_ENV === 'local') {\n  targetNetwork = NETWORKS.localhost;\n  networkName = 'localhost';\n  chainId = 1337;\n} else if (process.env.REACT_APP_ETH_ENV === 'mainnet') {\n  targetNetwork = NETWORKS.mainnet;\n  networkName = 'mainnet';\n  chainId = 1;\n} else if (process.env.REACT_APP_ETH_ENV === 'rinkeby') {\n  targetNetwork = NETWORKS.rinkeby;\n  networkName = 'rinkeby';\n  chainId = 4;\n} else if (process.env.REACT_APP_ETH_ENV === 'beta') {\n targetNetwork = NETWORKS.beta;\n networkName = 'beta';\n chainId = 80001;\n} else if (process.env.REACT_APP_ETH_ENV === 'mumbai') {\n targetNetwork = NETWORKS.mumbai;\n networkName = 'mumbai';\n chainId = 80001;\n}\nelse if (process.env.REACT_APP_ETH_ENV === 'matic') {\n  targetNetwork = NETWORKS.matic;\n  networkName = 'matic';\n  chainId = 137;\n}\nelse {\n  networkName='localhost'\n  targetNetwork = NETWORKS.localhost;\n  chainId = 1337;\n}\n\ntargetNetwork = NETWORKS.matic;\nnetworkName = 'matic';\nchainId = 137;\n\nlet appMode = process.env.REACT_APP_MODE || 'full';\n/*\nprocess.env.REACT_APP_ETH_ENV = 'matic';\ntargetNetwork = NETWORKS.matic;\nnetworkName = 'matic';\nchainId = 137;\n*/\n//targetNetwork = NETWORKS.rinkeby;\n// chainId = 1337;\n\n\n\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\nlet dayTime;\n\nif (!dayTime) {\n  const now = new Date();\n  const hour = now.getHours();\n  if (hour >= 7 && hour <= 9) {\n    dayTime = 'morning';\n  } else if (hour >= 10 && hour <= 17) {\n    dayTime = 'day';\n  } else if (hour >= 18 && hour <= 20) {\n    dayTime = 'evening';\n  } else {\n    dayTime = 'night';\n  }\n}\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n//console.log(mainnetProvider);\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst poktMainnetProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\n      \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n    )\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\n\n// 🏠 Your local provider is usually pointed at your local blockchain\n\nlet localProviderUrl;\nif (targetNetwork && targetNetwork.rpcUrl) {\n  localProviderUrl = targetNetwork.rpcUrl;\n}\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nlet blockExplorer;\nif (targetNetwork && targetNetwork.blockExplorer) {\n  blockExplorer = targetNetwork.blockExplorer;\n}\n\nlet lastCall = 0;\nlet startTime = Math.round(new Date().getTime() / 1000);\n\nlet fFoodBalance = 0;\nfunction App(props) {\n  const mainnetProvider =\n    poktMainnetProvider && poktMainnetProvider._isProvider\n      ? poktMainnetProvider\n      : scaffoldEthProvider && scaffoldEthProvider._network\n      ? scaffoldEthProvider\n      : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userProviderAndSigner = useUserProviderAndSigner(injectedProvider, localProvider);\n  const userSigner = userProviderAndSigner.signer;\n\n  let localBalance = useBalance(localProvider, address);\n  localBalance = ethers.utils.formatEther(localBalance);\n\n  function loadDataFromChain() {\n    if (lastCall === 0) {\n      lastCall = Math.round(new Date().getTime() / 1000);\n    }\n\n    const timeSinceStart = Math.round(new Date().getTime() / 1000) - startTime;\n    console.log('Time since start', timeSinceStart);\n    if (timeSinceStart >= 30) {\n      if (lastCall !== 0) {\n        const diff = Math.round(new Date().getTime() / 1000) - lastCall;\n        console.log('Diff since last call:', diff);\n        if (diff <= 5) {\n            console.log('Blocking new call');\n            return;\n        }\n      }\n    }\n\n    lastCall = Math.round(new Date().getTime() / 1000);\n\n\n    return stats;\n  }\n\n\n  useEffect(async() => {\n    if (lastBlockTime === 0) {\n      lastBlockTime = (await localProvider.getBlock(localProvider._lastBlockNumber)).timestamp;\n    }\n\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n         if (!userSigner.address) {\n          setAddress(newAddress);\n        }\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner, gasPrice);\n  const faucetTx = Transactor(localProvider, gasPrice);\n  const contractConfig = useContractConfig();\n  const readContracts = useContractLoader(localProvider, contractConfig);\n  const writeContracts = useContractLoader(userSigner, contractConfig, localChainId);\n  /*\n  console.log('ENV', process.env.REACT_APP_ETH_ENV);\n  console.log('LOCAL PROVIDER', localProvider);\n  console.log('READ CONTRACTS', readContracts, contractConfig);\n  console.log('WRITE CONTRACTS', writeContracts, contractConfig);\n  */\n\n  // loadDataFromChain();\n  // console.log('Loaded:', stats);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      const maticTargetNetwork = 'https://rpc-mumbai.maticvigil.com/';\n      let rpcUrl = targetNetwork ? targetNetwork.rpcUrl : '';\n      if (targetNetwork && targetNetwork.name === 'mumbai') {\n        rpcUrl = maticTargetNetwork;\n      }\n      networkDisplay = (\n        <div style={{ zIndex: 5, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      // console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  }\n/*\n  useOnBlock(localProvider, async() => {\n    lastBlockTime = (await localProvider.getBlock(localProvider._lastBlockNumber)).timestamp;\n    const blockTimeEvent = new CustomEvent('blockTime', {\n      bubbles: true,\n      detail: { lastBlockTime }\n    });\n    window.dispatchEvent(blockTimeEvent);\n  });\n  */\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          Get funds from faucet\n        </Button>\n      </div>\n    );\n  }\n\n\n  const dayTimeSwitch = () => {\n    if (dayTime === 'morning') {\n      dayTime = 'day';\n    } else if (dayTime === 'day') {\n      dayTime = 'evening';\n    } else if (dayTime === 'evening') {\n      dayTime = 'night';\n    } else if (dayTime === 'night') {\n      dayTime = 'morning';\n    }\n    const dayTimeEvent = new CustomEvent('dayTime', {\n      bubbles: true,\n      detail: { dayTime }\n    });\n    window.dispatchEvent(dayTimeEvent);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <BrowserRouter>\n        { networkDisplay }\n        <Switch>\n          <Route exact path=\"/\">\n            <RatMenu\n            tx={tx}\n            readContracts={readContracts}\n            writeContracts={writeContracts}\n            address={address}\n            provider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            setAddress={setAddress}\n            setInjectedProvider={setInjectedProvider}\n            injectedProvider={injectedProvider}\n            active={0}\n            dayTime={dayTime}\n            dayTimeSwitch={dayTimeSwitch}\n            debug={DEBUG}\n            chainId={chainId}\n            networkName={networkName}\n            appMode={appMode}\n            content={<Landing\n              tx={tx}\n              appMode={appMode}\n              contractConfig={contractConfig}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              userSigner={userSigner}\n              address={address}\n              provider={localProvider}\n              targetNetwork={targetNetwork}\n              setInjectedProvider={setInjectedProvider}\n              chainId={chainId}\n              lastBlockTime={lastBlockTime}\n              dayTime={dayTime}\n              debug={DEBUG}\n              localBalance={localBalance}\n              networkName={networkName}\n            />}\n            />\n          </Route>\n          <Route exact path=\"/game\">\n            <RatMenu\n            tx={tx}\n            readContracts={readContracts}\n            writeContracts={writeContracts}\n            address={address}\n            provider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            setAddress={setAddress}\n            appMode={appMode}\n            setInjectedProvider={setInjectedProvider}\n            injectedProvider={injectedProvider}\n            active={1}\n            dayTime={dayTime}\n            dayTimeSwitch={dayTimeSwitch}\n            debug={DEBUG}\n            chainId={chainId}\n            networkName={networkName}\n            appMode={appMode}\n            content={<Main\n              tx={tx}\n              contractConfig={contractConfig}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              userSigner={userSigner}\n              address={address}\n              provider={localProvider}\n              targetNetwork={targetNetwork}\n              chainId={chainId}\n              lastBlockTime={lastBlockTime}\n              dayTime={dayTime}\n              debug={DEBUG}\n              localBalance={localBalance}\n              networkName={networkName}\n              appMode={appMode}\n            />}\n            />\n          </Route>\n          <Route path=\"/leaderboard\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={1}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              appMode={appMode}\n              chainId={chainId}\n              networkName={networkName}\n              dayTimeSwitch={dayTimeSwitch}\n              content={<Leaderboard\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/claims\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={1}\n              appMode={appMode}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              networkName={networkName}\n              dayTimeSwitch={dayTimeSwitch}\n              content={<Claims\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/whitepaper\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={2}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Whitepaper\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/gameplay\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={2}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Gameplay\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/roadmap\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={2}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Roadmap\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/faq\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={2}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Faq\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/tos\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={2}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Tos\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/dao\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={4}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Dao\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/giveaway\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Giveaway\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/herrcooles\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Giveaway\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/liquidity\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={3}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Liquidity\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/infographics\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Infographics\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/infographic\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Infographics\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/contracts\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Contracts\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/admin\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              appMode={appMode}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<AdminDashboard\n                tx={tx}\n                chainId={chainId}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                appMode={appMode}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}