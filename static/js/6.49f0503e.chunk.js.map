{"version":3,"sources":["Lite.jsx"],"names":["targetNetwork","networkName","ethers","require","chainId","lastBlockTime","NETWORKS","localhost","dayTime","appMode","process","DEBUG","hour","Date","getHours","localProvider","blockExplorer","scaffoldEthProvider","navigator","onLine","providers","StaticJsonRpcProvider","poktMainnetProvider","mainnetInfura","INFURA_ID","localProviderUrl","rpcUrl","REACT_APP_PROVIDER","Math","round","getTime","Lite","props","_jsx2","userSigner","localBalance","tx","contractConfig","readContracts","writeContracts","mainnetProvider","_isProvider","_network","_useState","useState","_useState2","_slicedToArray","injectedProvider","setInjectedProvider","_useState3","_useState4","address","setAddress","networkDisplay","useOnBlock","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","blockTimeEvent","wrap","_context2","prev","next","getBlock","_lastBlockNumber","sent","timestamp","CustomEvent","bubbles","detail","window","dispatchEvent","stop","_useState5","_useState6","setRoute","useEffect","location","pathname","_useState7","_useState8","dayTimeSwitch","dayTimeEvent","_jsx","className","children","_jsxs","BrowserRouter","Switch","Route","exact","path","RatMenu","provider","active","debug","content","Landing","_defineProperty","Main","Leaderboard","Claims","Whitepaper","Gameplay","Roadmap","Faq","Giveaway","AdminDashboard","Infographics"],"mappings":"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lBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACmB,IAAU,CAClBnE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,YAAWN,SACrBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACoB,IAAQ,CAChBpE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,WAAUN,SACpBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACqB,IAAO,CACfrE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,OAAMN,SAChBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACsB,IAAG,CACXtE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,YAAWN,SACrBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACuB,IAAQ,CAChBvE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,SAAQN,SAClBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT1C,QAASA,EACTqF,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACT8E,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACwB,IAAc,CACtBxE,GAAIA,EACJhC,QAASA,EACTkC,cAAeA,EACfC,eAAgBA,EAChB9B,QAASA,EACT0C,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTwC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,gBAAeN,SACzBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACyB,IAAY,CACpBzE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA,QAInBmF,cAACM,IAAK,CAACE,KAAK,gBAAeN,SACzBF,cAACS,IAAO,CACNzD,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVgF,OAAQ,EACRhD,iBAAkBA,EAClBC,oBAAqBA,EACrBxC,QAASA,EACTJ,QAASA,EACTK,QAASA,EACTyE,cAAeA,EACfjF,YAAaA,EACbgG,QAASb,cAACyB,IAAY,CACpBzE,GAAIA,EACJE,cAAeA,EACfC,eAAgBA,EAChBY,QAASA,EACT2C,SAAU/E,EACVP,QAASA,EACTC,QAASA,EACTuC,oBAAqBA,EACrB/C,YAAaA","file":"static/js/6.49f0503e.chunk.js","sourcesContent":["import { Alert, Button, Col, Menu, Row, List } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState, Suspense } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport { Infographics, Faq, Roadmap, Landing, Address, Balance, Contract, GasGauge, Header, Ramp, Main, Leaderboard, RatMenu, Whitepaper, Gameplay, AdminDashboard, Claims, Giveaway} from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor, renderNotification } from \"./helpers\";\nimport {\n  useContractLoader,\n  useContractReader,\n  useGasPrice,\n  useOnBlock,\n  useBalance,\n  useUserProviderAndSigner,\n} from \"eth-hooks\";\nimport { useEventListener } from \"eth-hooks/events/useEventListener\";\n\nimport { useContractConfig } from \"./hooks\";\n\n// import Portis from \"@portis/web3\";\n// import Fortmatic from \"fortmatic\";\n// import Authereum from \"authereum\";\n\nconst { ethers } = require(\"ethers\");\n\nlet targetNetwork;\nlet chainId = 0;\nlet lastBlockTime = 0;\nlet networkName;\nif (process.env.REACT_APP_ETH_ENV === 'local') {\n  targetNetwork = NETWORKS.localhost;\n  networkName = 'localhost';\n  chainId = 1337;\n} else if (process.env.REACT_APP_ETH_ENV === 'mainnet') {\n  targetNetwork = NETWORKS.mainnet;\n  networkName = 'mainnet';\n  chainId = 1;\n} else if (process.env.REACT_APP_ETH_ENV === 'rinkeby') {\n  targetNetwork = NETWORKS.rinkeby;\n  networkName = 'rinkeby';\n  chainId = 4;\n} else if (process.env.REACT_APP_ETH_ENV === 'beta') {\n targetNetwork = NETWORKS.beta;\n networkName = 'beta';\n chainId = 80001;\n} else if (process.env.REACT_APP_ETH_ENV === 'mumbai') {\n targetNetwork = NETWORKS.mumbai;\n networkName = 'mumbai';\n chainId = 80001;\n}\nelse {\n  networkName='localhost'\n  targetNetwork = NETWORKS.localhost;\n  chainId = 1337;\n}\n\nlet appMode = process.env.REACT_APP_MODE || 'lite';\n\n//targetNetwork = NETWORKS.rinkeby;\n// chainId = 1337;\n\nconst DEBUG = false;\nconst NETWORKCHECK = false;\n\nlet dayTime;\n\nif (!dayTime) {\n  const now = new Date();\n  const hour = now.getHours();\n  if (hour >= 7 && hour <= 9) {\n    dayTime = 'morning';\n  } else if (hour >= 10 && hour <= 17) {\n    dayTime = 'day';\n  } else if (hour >= 18 && hour <= 20) {\n    dayTime = 'evening';\n  } else {\n    dayTime = 'night';\n  }\n}\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n//console.log(mainnetProvider);\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst poktMainnetProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\n      \"https://eth-mainnet.gateway.pokt.network/v1/lb/611156b4a585a20035148406\",\n    )\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_ID\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nlet localProvider;\nlet blockExplorer;\nlet lastCall = 0;\nlet startTime = Math.round(new Date().getTime() / 1000);\n\nlet fFoodBalance = 0;\nfunction Lite(props) {\n  const mainnetProvider =\n    poktMainnetProvider && poktMainnetProvider._isProvider\n      ? poktMainnetProvider\n      : scaffoldEthProvider && scaffoldEthProvider._network\n      ? scaffoldEthProvider\n      : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  let gasPrice;\n  let userProviderAndSigner;\n  let userSigner;\n  let localBalance;\n\n  function loadDataFromChain() {\n    if (lastCall === 0) {\n      lastCall = Math.round(new Date().getTime() / 1000);\n    }\n\n    const timeSinceStart = Math.round(new Date().getTime() / 1000) - startTime;\n    console.log('Time since start', timeSinceStart);\n    if (timeSinceStart >= 30) {\n      if (lastCall !== 0) {\n        const diff = Math.round(new Date().getTime() / 1000) - lastCall;\n        console.log('Diff since last call:', diff);\n        if (diff <= 5) {\n            console.log('Blocking new call');\n            return;\n        }\n      }\n    }\n\n    lastCall = Math.round(new Date().getTime() / 1000);\n\n\n    return stats;\n  }\n\n  const localChainId = 1;\n  const selectedChainId = 1;\n\n  let tx;\n  let faucetTx;\n  let contractConfig;\n  let readContracts;\n  let writeContracts;\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      const maticTargetNetwork = 'https://rpc-mumbai.maticvigil.com/';\n      let rpcUrl = targetNetwork ? targetNetwork.rpcUrl : '';\n      if (targetNetwork && targetNetwork.name === 'mumbai') {\n        rpcUrl = maticTargetNetwork;\n      }\n      networkDisplay = (\n        <div style={{ zIndex: 5, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      // console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  }\n\n  useOnBlock(localProvider, async() => {\n    lastBlockTime = (await localProvider.getBlock(localProvider._lastBlockNumber)).timestamp;\n    const blockTimeEvent = new CustomEvent('blockTime', {\n      bubbles: true,\n      detail: { lastBlockTime }\n    });\n    window.dispatchEvent(blockTimeEvent);\n  });\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          Get funds from faucet\n        </Button>\n      </div>\n    );\n  }\n\n\n  const dayTimeSwitch = () => {\n    if (dayTime === 'morning') {\n      dayTime = 'day';\n    } else if (dayTime === 'day') {\n      dayTime = 'evening';\n    } else if (dayTime === 'evening') {\n      dayTime = 'night';\n    } else if (dayTime === 'night') {\n      dayTime = 'morning';\n    }\n    const dayTimeEvent = new CustomEvent('dayTime', {\n      bubbles: true,\n      detail: { dayTime }\n    });\n    window.dispatchEvent(dayTimeEvent);\n  }\n\n  return (\n    <div className=\"App\">\n\n      <BrowserRouter>\n        { networkDisplay }\n        <Switch>\n          <Route exact path=\"/\">\n            <RatMenu\n            tx={tx}\n            readContracts={readContracts}\n            writeContracts={writeContracts}\n            address={address}\n            provider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            setAddress={setAddress}\n            setInjectedProvider={setInjectedProvider}\n            injectedProvider={injectedProvider}\n            active={1}\n            dayTime={dayTime}\n            dayTimeSwitch={dayTimeSwitch}\n            debug={DEBUG}\n            chainId={chainId}\n            networkName={networkName}\n            appMode={appMode}\n            content={<Landing\n              tx={tx}\n              appMode={appMode}\n              contractConfig={contractConfig}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              userSigner={userSigner}\n              address={address}\n              provider={localProvider}\n              targetNetwork={targetNetwork}\n              setInjectedProvider={setInjectedProvider}\n              chainId={chainId}\n              lastBlockTime={lastBlockTime}\n              dayTime={dayTime}\n              debug={DEBUG}\n              localBalance={localBalance}\n              networkName={networkName}\n            />}\n            />\n          </Route>\n          <Route exact path=\"/game\">\n            <RatMenu\n            tx={tx}\n            readContracts={readContracts}\n            writeContracts={writeContracts}\n            address={address}\n            provider={localProvider}\n            userSigner={userSigner}\n            mainnetProvider={mainnetProvider}\n            blockExplorer={blockExplorer}\n            setAddress={setAddress}\n            appMode={appMode}\n            setInjectedProvider={setInjectedProvider}\n            injectedProvider={injectedProvider}\n            active={2}\n            dayTime={dayTime}\n            dayTimeSwitch={dayTimeSwitch}\n            debug={DEBUG}\n            chainId={chainId}\n            networkName={networkName}\n            appMode={appMode}\n            content={<Main\n              tx={tx}\n              contractConfig={contractConfig}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              userSigner={userSigner}\n              address={address}\n              provider={localProvider}\n              targetNetwork={targetNetwork}\n              chainId={chainId}\n              lastBlockTime={lastBlockTime}\n              dayTime={dayTime}\n              debug={DEBUG}\n              localBalance={localBalance}\n              networkName={networkName}\n              appMode={appMode}\n            />}\n            />\n          </Route>\n          <Route path=\"/leaderboard\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={3}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              appMode={appMode}\n              chainId={chainId}\n              networkName={networkName}\n              dayTimeSwitch={dayTimeSwitch}\n              content={<Leaderboard\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/claims\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={4}\n              appMode={appMode}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              networkName={networkName}\n              dayTimeSwitch={dayTimeSwitch}\n              content={<Claims\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/whitepaper\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={5}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Whitepaper\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/gameplay\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={5}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Gameplay\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/roadmap\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={6}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Roadmap\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/faq\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={7}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Faq\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/giveaway\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Giveaway\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/admin\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              appMode={appMode}\n              provider={localProvider}\n              active={7}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<AdminDashboard\n                tx={tx}\n                chainId={chainId}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                appMode={appMode}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/infographics\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Infographics\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n          <Route path=\"/infographics\">\n            <RatMenu\n              tx={tx}\n              readContracts={readContracts}\n              writeContracts={writeContracts}\n              address={address}\n              provider={localProvider}\n              active={9}\n              injectedProvider={injectedProvider}\n              setInjectedProvider={setInjectedProvider}\n              dayTime={dayTime}\n              chainId={chainId}\n              appMode={appMode}\n              dayTimeSwitch={dayTimeSwitch}\n              networkName={networkName}\n              content={<Infographics\n                tx={tx}\n                readContracts={readContracts}\n                writeContracts={writeContracts}\n                address={address}\n                provider={localProvider}\n                dayTime={dayTime}\n                appMode={appMode}\n                setInjectedProvider={setInjectedProvider}\n                networkName={networkName}\n                />}\n              />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default Lite;\n"],"sourceRoot":""}